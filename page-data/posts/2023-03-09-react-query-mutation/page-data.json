{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/posts/2023-03-09-react-query-mutation/","result":{"data":{"markdownRemark":{"html":"<h1>React Query의 mutation</h1>\n<h2>mutation</h2>\n<ul>\n<li>일반적으로 서버에 <code class=\"language-text\">side-effect</code>를 일으키는 함수에 대한 내용을 정의</li>\n<li>예를 들어, DB에 todo를 추가하는 작업을 mutation이라고 할 수 있다.</li>\n<li>React 에서는 <code class=\"language-text\">useMutation</code> hook을 사용</li>\n</ul>\n<br/>\n<br/>\n<h2>useQuery와 차이점</h2>\n<ul>\n<li>useQuery는 <code class=\"language-text\">declarative</code>지만, useMutation은 <code class=\"language-text\">imperative</code>이다.\n<ul>\n<li>query는 일반적으로 자동으로 실행되지만, mutation은 따로 호출을 해야한다.</li>\n</ul>\n</li>\n<li>useQuery는 상태를 공유하지만, useMutation은 상태를 공유하지 않는다.</li>\n</ul>\n<br/>\n<br/>\n<h2>mutation을 query에 대한 변경사항을 반영하는 방법</h2>\n<h2>Invalidation</h2>\n<ul>\n<li>mutation 후 무효화시킬 쿼리를 queryClient에게 알려주는 방법이다.</li>\n<li>관련 쿼리는 다시 <code class=\"language-text\">refetch</code>를 해서 서버에 재요청을 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useAddTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>newComment<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/todo</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// mutation이 성공하면 \"todos\"키를 가진 쿼리를 무효화 시킨다.</span>\n      queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"todos\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Direct updates</h2>\n<ul>\n<li>서버에 재요청을 보내지 않고 기존 data에 업데이트 해야하는 data를 클라이언트에서 추가하는 방법이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useAddTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>newComment<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/todo</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>newTodo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// mutation이 성공하면 \"todoList\"키를 가진 쿼리에 newTodo data를 추가한다.</span>\n      queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"todoList\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>old<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>old<span class=\"token punctuation\">,</span> newTodo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Optimistic updates</h2>\n<ul>\n<li>서버에 요청을 보내기 전에 mutation의 성공을 했다고 가정하고 query상태를 업데이트를 하는 것이다.</li>\n<li>에러가 발생하면 이전 상태로 <code class=\"language-text\">rollback</code> 시키는 로직이 필요하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span>updateTodo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onMutate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>newTodo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">cancelQueries</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"todos\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> previousTodos <span class=\"token operator\">=</span> queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">getQueryData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"todos\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 서버에 요청 보내기 전 미리 query 상태를 업데이트</span>\n    queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"todos\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>old<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>old<span class=\"token punctuation\">,</span> newTodo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> previousTodos <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> newTodo<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 에러가 발생하면 이전 쿼리 상태로 롤백시킴</span>\n    queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"todos\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>previousTodos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<br/>\n<h2>mutation를 다룰 때 주의할 점</h2>\n<h2>Mutate vs MutateAsync</h2>\n<ul>\n<li><code class=\"language-text\">mutate</code>는 아무것도 return 하지 않는다.</li>\n<li><code class=\"language-text\">mutateAsync</code>는 mutation의 결과를 포함하는 Promise 객체를 return한다.</li>\n<li>mutation response에 접근이 필요할 때 <code class=\"language-text\">mutateAsync</code>를 사용하면 된다.</li>\n<li><code class=\"language-text\">mutateAsync</code>를 사용시 별도의 에러 처리가 필요</li>\n</ul>\n<h2>mutation function에 인자를 전달할 때 주의할 점</h2>\n<p>단 한 개의 인자만 넘길 수 있기 때문에 여러 개의 값을 넘길 때는 <code class=\"language-text\">object</code>를 사용하여 넘기면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// mutate 함수에 인자는 한 개의 값만 받기 때문에 에러 발생</span>\n<span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> description</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">updateTodo</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 객체로 묶어서 넘겨주면 된다.</span>\n<span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> description <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">updateTodo</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"world\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>useMutation callback vs mutate callback</h2>\n<ul>\n<li><code class=\"language-text\">useMutation</code> 콜백이 먼저 호출 후 <code class=\"language-text\">mutate</code> 콜백이 호출된다.</li>\n<li><code class=\"language-text\">mutate</code>는 컴포넌트가 언마운트되면 실행되지 않을 수 있다.</li>\n<li>절대적으로 필요한 작업(예를 들면 mutation 후 쿼리 무효화)인 경우 <code class=\"language-text\">useMutation</code> 콜백에서 수행해야함</li>\n<li>특정한 mutate에 대한 작업이 필요한 경우(예를 들어 수정 완료 알림)는 <code class=\"language-text\">mutate</code> 콜백에서 수행하면됨</li>\n</ul>\n<br/>\n<br/>\n<h2>참고</h2>\n<p><a href=\"https://react-query-v3.tanstack.com\">https://react-query-v3.tanstack.com</a></p>\n<p><a href=\"https://tkdodo.eu/blog/mastering-mutations-in-react-query\">https://tkdodo.eu/blog/mastering-mutations-in-react-query</a></p>\n<p><a href=\"https://parang.gatsbyjs.io/react/2022-react-13/\">https://parang.gatsbyjs.io/react/2022-react-13/</a></p>","frontmatter":{"date":"March 09, 2023","slug":"/posts/2023-03-09-react-query-mutation","title":"React Query의 mutation","category":"react-query"}}},"pageContext":{"id":"2696c34f-ae06-531b-bb26-8da5acfc6285","frontmatter__slug":"/posts/2023-03-09-react-query-mutation","__params":{"frontmatter__slug":"posts"}}},"staticQueryHashes":["3436969420"],"slicesMap":{}}