{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/posts/2023-03-08-react-query-query/","result":{"data":{"markdownRemark":{"html":"<h1>react-query : useQuery 활용법</h1>\n<h2>Query</h2>\n<ul>\n<li>서버에서 data를 가져오는 모든 Promise 기반 메서드(GET 또는 POST)와 함께 사용할 수 있음</li>\n<li>React에서 컴포넌트 또는 커스텀 훅 내부에 Query를 subscribe하려면 <code class=\"language-text\">useQuery</code> 훅을 사용하면됨</li>\n</ul>\n<br/>\n<br/>\n<h2>useQuery</h2>\n<ul>\n<li>\n<p>React에서 컴포넌트 또는 커스텀 훅 내부에 Query를 subscribe하기 위한 훅(hook)</p>\n</li>\n<li>\n<p>useQuery는 3개의 인자 값을 받는다.</p>\n<ul>\n<li>쿼리에 대한 고유 키 (<code class=\"language-text\">required</code>)</li>\n<li>Promise 객체를 return 하는 함수 (<code class=\"language-text\">required</code>)</li>\n<li>기타 옵션들 (<code class=\"language-text\">optional</code>)</li>\n</ul>\n</li>\n</ul>\n<br/>\n<br/>\n<h2>Query key</h2>\n<ul>\n<li><code class=\"language-text\">string</code> 또는 <code class=\"language-text\">array</code>를 받음</li>\n<li><code class=\"language-text\">string</code>으로 전달하면 내부적으로 <code class=\"language-text\">array</code>로 변환\n<ul>\n<li>내부적으로 Query key를 <code class=\"language-text\">\"hello\"</code>로 전달하는 거랑 <code class=\"language-text\">[\"hello\"]</code>로 전달하는 것이 동일한 쿼리</li>\n</ul>\n</li>\n<li>일반적으로 리스트를 불러오는 쿼리를 실행할 때 <code class=\"language-text\">string</code>으로 전달하고, 어떠한 특정한 조건을 쿼리에 전달해야 할때에는 <code class=\"language-text\">array</code>로 전달해야함</li>\n<li><code class=\"language-text\">array</code>로 전달할 때에는 값의 순서가 다르면 다른 쿼리라고 판단</li>\n<li>내부적으로 쿼리를 refetch 하거나, 캐싱하거나, 공유할 때 사용됨</li>\n</ul>\n<br/>\n<br/>\n<h2>Query function</h2>\n<ul>\n<li>\n<p>promise를 return 해줘야함</p>\n</li>\n<li>\n<p>resolve된 값은 useQuery의 return 객체의 <code class=\"language-text\">data</code> 프로퍼티에 저장됨</p>\n</li>\n<li>\n<p>error를 전달하면 useQuery의 return 객체의 <code class=\"language-text\">error</code> 프로퍼티에 저장됨</p>\n<ul>\n<li>\n<p><code class=\"language-text\">axios</code>는 request에 대해 에러가 발생하면 자동으로 오류를 던지지만 <code class=\"language-text\">fetch</code> 경우에는 내부에서 에러는 던져줘야함</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTodoList</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080/todos\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>query key를 query function 인자로 전달할 수 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTodoList</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> queryKey <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>queryKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"todoList\", {page: 1}]</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"todoList\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">page</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> getTodoList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>unique key는 내부적으로 쿼리를 refetch 하거나, 캐싱하거나, 공유할 때 사용됨</p>\n</li>\n</ul>\n<br/>\n<br/>\n<h2>useQuery에 반환되는 값</h2>\n<ul>\n<li>useQuery에서 return 값은 렌더링 하기위해 필요한 값들을 포함\n<ul>\n<li><code class=\"language-text\">isLoading</code> : 데이터가 없으며 <code class=\"language-text\">fetching</code> 상태인지?</li>\n<li><code class=\"language-text\">isError</code> : <code class=\"language-text\">fetching</code> 중에 에러가 발생했는지?</li>\n<li><code class=\"language-text\">isSuccess</code> : data를 성공적으로 가져왔는지?</li>\n<li><code class=\"language-text\">isIdle</code> : 쿼리를 사용할 수 없는지?</li>\n<li><code class=\"language-text\">status</code> : 위의 4가지 결과 값을 대체 가능\n<ul>\n<li>status === <code class=\"language-text\">\"loading\"</code> : <code class=\"language-text\">isLoading</code>과 동일</li>\n<li>status === <code class=\"language-text\">\"error\"</code> : <code class=\"language-text\">isError</code>과 동일</li>\n<li>status === <code class=\"language-text\">\"success\"</code> : <code class=\"language-text\">isSuccess</code> 동일</li>\n<li>status === <code class=\"language-text\">\"idle\"</code> : <code class=\"language-text\">isIdle</code> 동일</li>\n</ul>\n</li>\n<li><code class=\"language-text\">error</code> : error가 발생했을 때(isError가 true일 때), query function로 부터 전달받은 <code class=\"language-text\">error 값</code></li>\n<li><code class=\"language-text\">data</code> : 성공적으로 data를 받아올 때, query function의 <code class=\"language-text\">return 값</code></li>\n<li><code class=\"language-text\">isFetching</code> : 쿼리를 <code class=\"language-text\">fetching</code> 중인지? (<code class=\"language-text\">refetching</code> 포함)</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// async function fetchTodoList() {</span>\n  <span class=\"token comment\">//   const res = await axios.get(\"http://localhost:8080/todos\");</span>\n  <span class=\"token comment\">//   return res;</span>\n  <span class=\"token comment\">// }</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> todoList<span class=\"token punctuation\">,</span> status <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"todos\"</span><span class=\"token punctuation\">,</span> fetchTodoList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// isLoading === true와 동일</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"loading\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// isError === true와 동일</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Error<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>todoList <span class=\"token operator\">?</span> todoList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>TodoItem key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>todo<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<br/>\n<h2>Typescript 환경에서 type 정의</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useQuery</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Todo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> AxiosError<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"todoList\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> getTodoList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>useQuery&#x3C;Q, E>(query key, query function)\n<ul>\n<li><code class=\"language-text\">Q</code> : query function의 return 값의 type</li>\n<li><code class=\"language-text\">E</code> : query function에서 전달한 error type</li>\n</ul>\n</li>\n</ul>\n<br/>\n<br/>\n<h2>참고</h2>\n<p><a href=\"https://react-query-v3.tanstack.com\">react-query 공식문서</a></p>","frontmatter":{"date":"March 08, 2023","slug":"/posts/2023-03-08-react-query-query","title":"react-query : useQuery 활용법","category":"react-query"}}},"pageContext":{"id":"fdd30f4a-7466-56ca-8e99-13a1cac6dca2","frontmatter__slug":"/posts/2023-03-08-react-query-query","__params":{"frontmatter__slug":"posts"}}},"staticQueryHashes":["3436969420"],"slicesMap":{}}